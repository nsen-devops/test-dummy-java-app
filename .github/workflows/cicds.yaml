
name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
      
      - name: Build with Maven
        run: mvn clean install
        if: ${{ github.event_name != 'pull_request' || !contains(github.event.pull_request.title, 'python') }}
      
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Nexus Vulnerability Scan
        uses: sonatype-nexus-community/nexus-iq-github-action@main
        with:
          applicationId: 'your-application-id'
          iqServerUrl: 'https://your-nexus-iq-server-url'
          iqAuthToken: ${{ secrets.NEXUS_IQ_TOKEN }}
      
      - name: Static Application Security Testing (SAST)
        uses: github/codeql-action/analyze@v1
      
      - name: Dynamic Application Security Testing (DAST)
        run: echo "DAST Step" # Placeholder for DAST step
      
      - name: Build Docker image
        run: docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/my-app:$GITHUB_SHA .
      
      - name: Push Docker image to Google Artifact Registry
        run: |
          echo ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }} | docker login -u _json_key --password-stdin https://gcr.io
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/my-app:$GITHUB_SHA
      
      - name: Scan container image
        run: gcloud artifacts docker images scan gcr.io/${{ secrets.GCP_PROJECT_ID }}/my-app:$GITHUB_SHA --format=get-value(vulnerabilities.high_severity.count)
        env:
          CLOUDSDK_CORE_PROJECT: ${{ secrets.GCP_PROJECT_ID }}
          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          export_default_credentials: true
      
      - name: Deploy to Google Kubernetes Engine
        run: |
          gcloud container clusters get-credentials n-test --zone us-central1-c
          kubectl apply -f deployment.yaml
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
